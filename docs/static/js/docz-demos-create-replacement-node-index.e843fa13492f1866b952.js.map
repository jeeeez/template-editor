{"version":3,"sources":["C:/Users/JF/Desktop/template-editor/packages/react-template-editor/docz/demos/createReplacementNode/index.mdx","C:/Users/JF/Desktop/template-editor/packages/editor/src/mode.ts","C:/Users/JF/Desktop/template-editor/packages/editor/src/createSpanReplacementNode.ts","C:/Users/JF/Desktop/template-editor/packages/editor/src/index.ts","C:/Users/JF/Desktop/template-editor/packages/react-template-editor/src/index.tsx"],"names":["layoutProps","MDXLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","this","Playground","ReactTemplateEditor","__codesandbox","value","placeholder","placeholders","type","matchRegexp","className","text","Date","toString","createReplacementNode","span","document","createElement","innerText","classList","add","addEventListener","window","alert","isMDXComponent","counter","createSpanReplacementNode","innerHTML","$span","split","forEach","subClassName","container","options","config","name","mode","now","defineMode","tokenBase","stream","state","line","lineOracle","match","consumeRegexp","matched","matchedValue","next","startState","tokenize","context","token","eatSpace","undefined","lineWrapping","instance","scrollbarStyle","readOnly","disabled","initialValue","replaceVariables","listenContentChange","on","getDoc","getAllMarks","mark","clear","getTokens","startPos","ch","start","endPos","end","replacedWith","string","hasOwnProperty","markText","tokens","eachLine","getLineTokens","lineNo","push","getValue","setValue","input","onChange","change","ref","style","editorRef","editor","setEditorInstance","current","setOption","forceUpdateEditor","setTimeout","border","borderRadius","rest"],"mappings":"ocAYMA,EAAc,GAGdC,EAAY,UACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACH,EAAD,iBAAeD,EAAiBI,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,iBAAQ,CACN,GAAM,gCADR,gCAIA,mFAAkE,0BAAYC,WAAW,KAAvB,QAAlE,+BAAkJ,0BAAYA,WAAW,KAAvB,yBAAlJ,aACA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,i6BAAs7BC,QAAS,CACh+BL,MAAOM,KAAOA,KAAKN,MAAQA,EAC3BO,eACAC,yBACCC,cAAa,gmEAAmmER,QAAQ,cAC7nE,YAAC,IAAD,CAAqBS,MAAM,kFAA+EC,YAAY,4BAA4BC,aAAc,CAAC,CAC3JC,KAAM,WACNC,YAAa,sBACbC,UAAW,aACXC,KAAM,SACL,CACDH,KAAM,WACNC,YAAa,sBACbC,UAAW,aACXC,MAAM,IAAIC,MAAOC,YAChB,CACDL,KAAM,mBACNC,YAAa,gBACbC,UAAW,WACXC,KAAM,qBACJG,sBAAuB,SAAAR,GACzB,IAAMS,EAAOC,SAASC,cAAc,QAMpC,OALAF,EAAKG,UAAYZ,EAAYK,KAC7BI,EAAKI,UAAUC,IAAId,EAAYI,WAC/BK,EAAKM,iBAAiB,QAAS,WAC7BC,OAAOC,MAAMjB,EAAYK,QAEpBI,GACNnB,QAAQ,0B,mMAMjBH,EAAW+B,gBAAiB,G,2cCpDxBC,EAAU,ECFP,SAASC,EAA0BC,EAAmBjB,GAC3D,IAAMkB,EAAQZ,SAASC,cAAc,QASrC,OARAW,EAAMD,UAAYA,EACdjB,GACFA,EAAUmB,MAAM,KAAKC,QAAQ,SAAAC,GACvBA,GACFH,EAAMT,UAAUC,IAAIW,KAInBH,ECdT,EAAQ,sEAER,EAAQ,kEAQR,iBAIE,WAAYI,EAAgCC,GAAA,KAAAA,UAE1C,IFRuBC,EACnBC,EEOEC,GFRiBF,EEQC,CACtB3B,aAAc0B,EAAQ1B,cFRpB4B,EAAO,sBAAqBV,EAAO,IAAIb,KAAKyB,MAElD,IAAWC,WAAWH,EAAM,WAE1B,SAASI,EAAUC,EAAiCC,G,QAClDA,EAAMC,KAAQF,EAAeG,WAAWD,K,IACxC,IAA0B,QAAAR,EAAO3B,cAAY,8BAAE,CAA1C,IAAMD,EAAW,QACpB,GAAIkC,EAAOI,MAAMtC,EAAYG,aAAa,GAAQ,CAEhD,IAAMoC,EAAgBvC,EAAYuC,eAAiBvC,EAAYG,YACzDqC,EAAUN,EAAOI,MAAMC,GAG7B,OAFAJ,EAAMnC,YAAcA,EACpBmC,EAAMM,aAAeD,EAAQ,GACtBxC,EAAYE,O,iGAMvB,OAFAgC,EAAOQ,OAEA,KAGT,MAAO,CACLC,WAAU,WACR,MAAO,CAAEC,SAAUX,EAAWY,QAAS,OAGzCC,MAAK,SAACZ,EAAQC,GACZ,OAAIA,EAAMS,WAAaX,GAAaC,EAAOa,YACzCZ,EAAMnC,iBAAcgD,EACpBb,EAAMM,kBAAeO,EACd,MAGKb,EAAMS,SAASV,EAAQC,OAMpCN,GE7BCoB,IAAe,iBAAkBtB,MAAYA,EAAQsB,aAG3DtD,KAAKuD,SAAW,IAAWxB,EAAW,CACpCI,KAAI,EACJmB,aAAY,EACZE,eAAgB,SAChBC,WAAUzB,EAAQ0B,UAAW,WAC7BtD,MAAO4B,EAAQ2B,cAAgB,GAC/BtD,YAAa2B,EAAQ3B,cAIvBL,KAAK4D,mBACL5D,KAAK6D,sBA+ET,OA5EU,YAAAA,oBAAR,sBAQE7D,KAAKuD,SAASO,GAAG,SAAU,WACzB,EAAKF,sBAID,YAAAA,iBAAR,WACU,IAAA/C,EAAA,aAAAA,sBAEFE,EAAWf,KAAKuD,SAASQ,SAC/BhD,EAASiD,cAAcnC,QAAQ,SAAAoC,GAC7BA,EAAKC,UAGPlE,KAAKmE,YAAYtC,QAAQ,SAAAsB,GACvB,GAAIA,GAASA,EAAM5C,MAAQ4C,EAAMX,OAASW,EAAMX,MAAMnC,YAAa,CAEjE,IAAMoC,EAAOU,EAAMX,MAAMC,KACnB2B,EAAW,CAAE3B,KAAI,EAAE4B,GAAIlB,EAAMmB,OAC7BC,EAAS,CAAE9B,KAAI,EAAE4B,GAAIlB,EAAMqB,KAE3B,EAAcrB,EAAMX,MAAMnC,YAC1B,EAAe8C,EAAMX,MAAMM,aAE3B2B,EAAe5D,EACnBA,EAAsB,EAAa,EAAcsC,EAAMuB,QAK9CjD,EAHM,GAAe,EAAYkD,eAAe,QACxB,kBAArB,EAAYjE,KAAoB,EAAYA,KAAO,EAAYA,KAAK,GAAiB,EAC7E,GAAe,EAAYiE,eAAe,aAAe,EAAYlE,UAAY,eAIvGM,EAAS6D,SAASR,EAAUG,EAAQ,CAClCE,aAAY,QAMb,YAAAN,UAAP,sBACQU,EAA6B,GAMnC,OALiB7E,KAAKuD,SAASQ,SACtBe,SAAS,SAAArC,GACG,EAAKc,SAASwB,cAAetC,EAAauC,UAClDnD,QAAQ,SAAAsB,GAAS,OAAA0B,EAAOI,KAAK9B,OAEnC0B,GAGF,YAAAK,SAAP,WACE,OAAOlF,KAAKuD,SAASQ,SAASmB,YAGzB,YAAAC,SAAP,SAAgBC,GACdpF,KAAKuD,SAASQ,SAASoB,SAASC,IAG3B,YAAAC,SAAP,SAAgBC,GAAhB,WACEtF,KAAKuD,SAASO,GAAG,SAAU,WACzBwB,EAAO,EAAKJ,eASlB,EAvGA,G,uyBC2DahF,EAAsB,aAlEsC,SAACR,EAAO6F,GAE7E,QAAAnF,aAAA,WACAoF,EAAA,EAAAA,MACA9B,EAAA,EAAAA,SACArD,EAAA,EAAAA,YACAC,EAAA,EAAAA,aACAO,EAAA,EAAAA,sBACAwE,EAAA,EAAAA,SACA,oGACII,EAAY,SAA6B,MACzC,oBAACC,EAAA,KAAQC,EAAA,KAkDf,OA/CA,YAAgB,WACdA,EAAkB,IAAI,EAAeF,EAAUG,QAAU,CACvDjC,aAAcvD,EACdsD,SAAQ,EACRrD,YAAW,EACXC,aAAY,EACZO,sBAAqB,MAEtB,IAGH,YAAgB,WACVwE,GACFK,EAAQL,SAAS,SAACD,GAChB,IAAMP,EAASa,EAAQvB,YACvBkB,EAASD,EAAOP,MAGnB,IAGH,YAAgB,WACda,GAAUA,EAAOP,SAASzF,EAAMU,QAC/B,CAACV,EAAMU,QAIV,YAAgB,WACdsF,GAAUA,EAAOnC,SAASsC,UAAU,cAAexF,IAClD,CAACX,EAAMW,cAIV,YAAgB,WACdqF,GAAUA,EAAOnC,SAASsC,UAAU,aAAYnC,GAAW,aAC1D,CAAChE,EAAMgE,WAGV,sBAA0B6B,EAAK,WAAM,MAAC,CACpCO,kBAAmB,WACjBJ,EAAQP,SAASzF,EAAMU,MAAQ,KAC/B2F,WAAW,WACTL,EAAQP,SAASzF,EAAMU,QACtB,OAKL,yBAAKmF,IAAKE,EAAWD,MAAK,GAAIQ,OAAQ,oBAAqBC,aAAc,GAAMT,IAAaU,M","file":"static/js/docz-demos-create-replacement-node-index.7c4c0af0.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground } from 'docz';\nimport { ReactTemplateEditor } from '@template-editor/react';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"custom-createreplacementnode\"\n    }}>{`Custom createReplacementNode`}</h1>\n\n    <p>{`Click the variables below, you can addEventListener on the `}<inlineCode parentName=\"p\">{`span`}</inlineCode>{` which create by the custom `}<inlineCode parentName=\"p\">{`createReplacementNode`}</inlineCode>{` function`}</p>\n    <Playground __position={0} __code={'<ReactTemplateEditor\\n  value=\\\"Hello {{nickname}}\\\\nToday is {{datetime}}\\\\nThis is an {{unknown variable}}\\\\n\\\"\\n  placeholder=\\\"Please input your message\\\"\\n  placeholders={[\\n    {\\n      type: \\'variable\\',\\n      matchRegexp: /^\\\\{\\\\{(nickname)\\\\}\\\\}/,\\n      className: \\'cm-keyword\\',\\n      text: \\'Peter\\',\\n    },\\n    {\\n      type: \\'variable\\',\\n      matchRegexp: /^\\\\{\\\\{(datetime)\\\\}\\\\}/,\\n      className: \\'cm-keyword\\',\\n      text: new Date().toString(),\\n    },\\n    {\\n      type: \\'unknown-variable\\',\\n      matchRegexp: /^\\\\{\\\\{(.*)\\\\}\\\\}/,\\n      className: \\'cm-error\\',\\n      text: \\'Unknown Variable\\',\\n    },\\n  ]}\\n  createReplacementNode={placeholder => {\\n    const span = document.createElement(\\'span\\')\\n    span.innerText = placeholder.text\\n    span.classList.add(placeholder.className)\\n    span.addEventListener(\\'click\\', () => {\\n      window.alert(placeholder.text)\\n    })\\n    return span\\n  }}\\n/>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      ReactTemplateEditor\n    }} __codesandbox={`N4IgZglgNgpgziAXKCA7AJjAHgOgBYAuAtlEqAMYD2qBMNSIAPOhAG4AEE6AvADogAnSpQL8AfIwD0LVmJABfADQg0mXACsEyEFRp0CDSQCojvVO3YAVPBDjsAwpUwBlAIYYARpSzs8rux4wdOyuAK4ElESuBBDkrlBQAJ7sAOZ0MALRMOjsoXBoKWYWAAZUmHDu6F5YGcU47ACSYOyJlKEA5AIw7OShAhBtdniUAO7sBH4Evq4ADjPp6IotbT3uRT14MOQA1uxtU20C7OiU5EMZMIi-BAQzcIiSkikQE6EeOFREkmXwldXfTl-nm8GTM6yay1C7Gw836dHI3XcyTgBAEoRSKVgdhGLzw4xsdgqwKwSxmsH83UytkR5lscFCMHW1FSuLe9UQAEozEZJGYIEQZpQBFMAEowVzkKZgIREdidcWS9oAbj5AqFooVBAAIgB5ACy7GlkTlXQlBAAtCciMrVYLhQ5IoLUPpDTK5ThJNhXALYDbUGYxWbdXqcF0MBkABTrZhsMTrCyMPAAZjEjjVzponDVwuy7BxEx6gKJVRBAkQUmTcfMFnYjBmYgjDSmUWSztzrnQLBi1Hi7BmQju40oqRgUxe7DDmH6qBSeZgCQ5Unr8draadLskVYT0ljijMJ16RH0ODSBAAorAjzQAEKJBroCOdYQEdpc1AcpUKZRen0wHCaMgdGoWh6EQFRsymYB2AABSgVxEhSIRQgwdh5FdY12gPAAvP1-TtSD2EDSVLBgH0sjPLshVQ9DZXaAABWgyNoc1sheIVJFNRUVVQPD1UIzUaJNTV2jBVBdBRY5Tiw5wCESLF2G4dhgHWKIBGeVArnaAAGdgkxmLB2j3asZg7FgZ00gAWfT2AANn0wz1jAYCADFvWgRJNP4ZxDgRB1MBgoR-CWIhqEoOATIRBzqycmhnAgLDLnYABGCyjPkUTxKmABBOYFPYCMoPIGwoHQMNUI5BSxHy6MZHYFE5JgbhgGwmSGrgeQtxrYAiugUrggAMn68ZEnmShmh6kqyu4aa5TAZDJQGVB2nYAB-DZerDCMKquCa-tQdLqykGQqzfMwYT4zAwDCKApi2yrqsOnLl2rBMiIIHBnMyFIrwITqa1rN6SKYmAKLYgQV3-1h4gZPgQAACXnKBh2AYAeJ2VBvRgeR0rMSwnHgzg7BR9AshiI9sd4XGCUJkJzBR5DtlQUZzCh_pXA8WAKbBEAIZrMkJRgYYSoyWHYPFOBujQGZwkhI4jzgCo0n4XmLH5hEhanOAmoAbRVrq9f-2T5k01mIHZ30jP-q2ayiAgirFNIsBmK5JAAPUp5TeGACM0cZzGuV4HH5EkS3rat8g4IVgA5THNPIIhzW2GBEhGIV0CisOrdoLACE06DRwyDPM9Q0PM-Ul7i6NxL2lN82YCL4v2Ft-2YEd532Ddj2PYjEnaDJmAA6DkODZrCP_DgGOjzjhOk5TtOG8r7Bc_YZ0xi1LItpwCIZOnFIttLsOlBH8vG4sKvNIZpmRlQc1a45-uD8z5u8AdmEXfdr3u5wIxB8p4PH7DmPaOsc5TxxYgIIQAgF6Z2zsvdoABVVAjNmbsAAGquDZvfaBVsj4V3-gAXQOpncgppaBijVqRfQUdARNQoRrDI90T7F0ynVEy5hFIHlCD9D4pCQaXn0I-cK7hXwjyEagHAaBnQCBIjnPKdDKDCwEFvJeoi2EfEjnAAAMrYd6pkIzyMUeo8ek8B6qPcDgUyZ5WD6G0SidIAhHwR1iNsQy-UKrcCqkwxuOIMCjAsbAYU-i4LqwUVOZROc3yN3kJE4uXQCB9HMGIvWFM8Edz-rWSQb0PpfR-p1KQT0TpmC_CACK2xXBpH_HAaggFdAgQMGBJh_AMZHn4FcfgPxizVAyCxLA3oySMhAKHfg1iBD5GoK09g_AtI4GmVpIK6x-DlBIRAGY3Z_RIEmSALKdU8KwGhL038xwYBkkoIkXMeQCgTk1OaDpfxSzzOrPwKIaAJn8FUNgSpDyLCLOOXQTAYkIDwAmV4zZ2FXkgFdklHAAAmGZXyaz8E4qIDZ_BIU2RwAADhwDZeF3zBDXKtOCtFmLsXK2rAdeQxTOneA-NQSAKRKnVO0LU_QDBlIgEYvzWgrT2m8PNEi80swZj8EpdjeQQA`} mdxType=\"Playground\">\n  <ReactTemplateEditor value='Hello {{nickname}}\\nToday is {{datetime}}\\nThis is an {{unknown variable}}\\n' placeholder='Please input your message' placeholders={[{\n        type: 'variable',\n        matchRegexp: /^\\{\\{(nickname)\\}\\}/,\n        className: 'cm-keyword',\n        text: 'Peter'\n      }, {\n        type: 'variable',\n        matchRegexp: /^\\{\\{(datetime)\\}\\}/,\n        className: 'cm-keyword',\n        text: new Date().toString()\n      }, {\n        type: 'unknown-variable',\n        matchRegexp: /^\\{\\{(.*)\\}\\}/,\n        className: 'cm-error',\n        text: 'Unknown Variable'\n      }]} createReplacementNode={placeholder => {\n        const span = document.createElement('span');\n        span.innerText = placeholder.text;\n        span.classList.add(placeholder.className);\n        span.addEventListener('click', () => {\n          window.alert(placeholder.text);\n        });\n        return span;\n      }} mdxType=\"ReactTemplateEditor\" />\n    </Playground>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n  ","import CodeMirror from 'codemirror';\nimport { IPlaceholder } from './index.d';\n\n\ninterface IModeConfig {\n  placeholders: IPlaceholder[];\n}\n\nlet counter = 0;\n\nexport function defineMode(config: IModeConfig) {\n  const name = `Template-Editor-${++counter}-${Date.now()}`;\n\n  CodeMirror.defineMode(name, () => {\n\n    function tokenBase(stream: CodeMirror.StringStream, state: any) {\n      state.line = (stream as any).lineOracle.line;\n      for (const placeholder of config.placeholders) {\n        if (stream.match(placeholder.matchRegexp, false)) {\n\n          const consumeRegexp = placeholder.consumeRegexp || placeholder.matchRegexp;\n          const matched = stream.match(consumeRegexp);\n          state.placeholder = placeholder;\n          state.matchedValue = matched[1];\n          return placeholder.type;\n        }\n      }\n\n      stream.next();\n\n      return null;\n    }\n\n    return {\n      startState() {\n        return { tokenize: tokenBase, context: null };\n      },\n\n      token(stream, state: any) {\n        if (state.tokenize === tokenBase && stream.eatSpace()) {\n          state.placeholder = undefined;\n          state.matchedValue = undefined;\n          return null;\n        }\n\n        const style = state.tokenize(stream, state);\n\n        return style;\n      }\n    };\n  });\n  return name;\n}\n","\n/**\n * Create `span` for Placehoder display\n * @param innerHTML string\n * @param className string\n */\nexport function createSpanReplacementNode(innerHTML: string, className: string) {\n  const $span = document.createElement('span');\n  $span.innerHTML = innerHTML;\n  if (className) {\n    className.split(' ').forEach(subClassName => {\n      if (subClassName) {\n        $span.classList.add(subClassName);\n      }\n    });\n  }\n  return $span;\n}\n","import CodeMirror from 'codemirror';\nimport 'codemirror/lib/codemirror.css';\nrequire('codemirror/addon/scroll/simplescrollbars');\nimport 'codemirror/addon/scroll/simplescrollbars.css';\nrequire('codemirror/addon/display/placeholder');\nimport { defineMode } from './mode';\nimport { IEditorOptions } from './index.d';\nimport { createSpanReplacementNode } from './createSpanReplacementNode';\nexport { createSpanReplacementNode } from './createSpanReplacementNode';\n\n\n\nexport class TemplateEditor {\n\n  public instance!: CodeMirror.Editor;\n\n  constructor(container: HTMLElement, private options: IEditorOptions) {\n\n    const mode = defineMode({\n      placeholders: options.placeholders\n    });\n\n    const lineWrapping = 'lineWrapping' in options ? !!options.lineWrapping : true;\n\n\n    this.instance = CodeMirror(container, {\n      mode,\n      lineWrapping,\n      scrollbarStyle: 'simple',\n      readOnly: options.disabled ? 'nocursor' : false,\n      value: options.initialValue || '',\n      placeholder: options.placeholder\n    });\n\n\n    this.replaceVariables();\n    this.listenContentChange();\n  }\n\n  private listenContentChange() {\n    // if (!this.options.controlled) {\n    //   this.instance.on('beforeChange', (_R, change) => {\n    //     console.log(change,_R);\n    //     change.cancel();\n    //   });\n    // }\n\n    this.instance.on('change', () => {\n      this.replaceVariables();\n    });\n  }\n\n  private replaceVariables() {\n    const { createReplacementNode } = this.options;\n\n    const document = this.instance.getDoc();\n    document.getAllMarks().forEach(mark => {\n      mark.clear();\n    });\n\n    this.getTokens().forEach(token => {\n      if (token && token.type && token.state && token.state.placeholder) {\n\n        const line = token.state.line;\n        const startPos = { line, ch: token.start };\n        const endPos = { line, ch: token.end };\n\n        const placeholder = token.state.placeholder;\n        const matchedValue = token.state.matchedValue;\n\n        const replacedWith = createReplacementNode ?\n          createReplacementNode(placeholder, matchedValue, token.string) :\n          (() => {\n            const text = placeholder && placeholder.hasOwnProperty('text') ?\n              (typeof placeholder.text === 'string' ? placeholder.text : placeholder.text(matchedValue)) : matchedValue;\n            const className = placeholder && placeholder.hasOwnProperty('className') ? placeholder.className : 'cm-variable';\n            return createSpanReplacementNode(text, className);\n          })();\n\n        document.markText(startPos, endPos, {\n          replacedWith\n        });\n      }\n    });\n  }\n\n  public getTokens() {\n    const tokens: CodeMirror.Token[] = [];\n    const document = this.instance.getDoc();\n    document.eachLine(line => {\n      const lineTokens = this.instance.getLineTokens((line as any).lineNo());\n      lineTokens.forEach(token => tokens.push(token));\n    });\n    return tokens;\n  }\n\n  public getValue() {\n    return this.instance.getDoc().getValue();\n  }\n\n  public setValue(input: string) {\n    this.instance.getDoc().setValue(input);\n  }\n\n  public onChange(change: (input: string) => any) {\n    this.instance.on('change', () => {\n      change(this.getValue());\n    });\n  }\n\n  // public insert(input: string) {\n  //   const document = this.instance.getDoc();\n  //   const cursor = document.getCursor();\n  //   document.replaceRange(input, cursor, cursor);\n  // }\n}\n","import * as React from 'react';\nimport { TemplateEditor } from '@template-editor/native';\nimport { IProps, IImperativeHandles } from './index.d';\n\n\nconst Editor: React.RefForwardingComponent<IImperativeHandles, IProps> = (props, ref) => {\n  const {\n    value = '',\n    style,\n    disabled,\n    placeholder,\n    placeholders,\n    createReplacementNode,\n    onChange,\n    ...rest } = props;\n  const editorRef = React.useRef<HTMLDivElement>(null);\n  const [editor, setEditorInstance] = React.useState<TemplateEditor>();\n\n  // componentDidMount\n  React.useEffect(() => {\n    setEditorInstance(new TemplateEditor(editorRef.current!, {\n      initialValue: value,\n      disabled,\n      placeholder,\n      placeholders,\n      createReplacementNode\n    }));\n  }, []);\n\n  // add onchange listener\n  React.useEffect(() => {\n    if (onChange) {\n      editor!.onChange((input) => {\n        const tokens = editor!.getTokens();\n        onChange(input, tokens);\n      });\n    }\n  }, []);\n\n  // when value changed\n  React.useEffect(() => {\n    editor && editor.setValue(props.value);\n  }, [props.value]);\n\n\n  // when placeholder changed\n  React.useEffect(() => {\n    editor && editor.instance.setOption('placeholder', placeholder);\n  }, [props.placeholder]);\n\n\n  // when disabled changed\n  React.useEffect(() => {\n    editor && editor.instance.setOption('readOnly', disabled ? 'nocursor' : false);\n  }, [props.disabled]);\n\n  // when other props changed, Codemirror need to re-parse\n  React.useImperativeHandle(ref, () => ({\n    forceUpdateEditor: () => {\n      editor!.setValue(props.value + ' ');\n      setTimeout(() => {\n        editor!.setValue(props.value);\n      }, 0);\n    }\n  }));\n\n  return (\n    <div ref={editorRef} style={{ border: '1px solid #d9d9d9', borderRadius: 2, ...style }} {...rest}></div>\n  );\n};\n\nexport const ReactTemplateEditor = React.forwardRef(Editor);\n"],"sourceRoot":""}