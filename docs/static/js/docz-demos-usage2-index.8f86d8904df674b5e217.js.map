{"version":3,"sources":["C:/Users/JF/Desktop/template-editor/packages/react-template-editor/docz/demos/usage2/index.tsx","C:/Users/JF/Desktop/template-editor/packages/react-template-editor/docz/demos/usage2/index.mdx","C:/Users/JF/Desktop/template-editor/packages/editor/src/mode.ts","C:/Users/JF/Desktop/template-editor/packages/editor/src/createSpanReplacementNode.ts","C:/Users/JF/Desktop/template-editor/packages/editor/src/index.ts","C:/Users/JF/Desktop/template-editor/packages/react-template-editor/src/index.tsx"],"names":["DefaultPlaceholders","type","matchRegexp","className","text","ReactTemplateEditorWrapper","editorRefObj","value","placeholders","setTimeout","push","current","forceUpdateEditor","ref","layoutProps","MDXLayout","MDXContent","components","props","mdxType","__position","__code","__scope","this","Playground","__codesandbox","isMDXComponent","counter","createSpanReplacementNode","innerHTML","$span","document","createElement","split","forEach","subClassName","classList","add","container","options","config","name","mode","Date","now","defineMode","tokenBase","stream","state","line","lineOracle","placeholder","match","consumeRegexp","matched","matchedValue","next","startState","tokenize","context","token","eatSpace","undefined","lineWrapping","instance","scrollbarStyle","readOnly","disabled","initialValue","replaceVariables","listenContentChange","on","createReplacementNode","getDoc","getAllMarks","mark","clear","getTokens","startPos","ch","start","endPos","end","replacedWith","string","hasOwnProperty","markText","tokens","eachLine","getLineTokens","lineNo","getValue","setValue","input","onChange","change","ReactTemplateEditor","editorRef","editor","setEditorInstance","setOption","rest"],"mappings":"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","file":"static/js/docz-demos-usage2-index.47df2eb7.js","sourcesContent":["import * as React from 'react';\nimport { ReactTemplateEditor } from '@template-editor/react';\nimport { IImperativeHandles } from '@template-editor/react/index.d';\n\n\nconst DefaultPlaceholders = [{\n  type: 'variable',\n  matchRegexp: /^\\{\\{(123)\\}\\}/,\n  className: 'cm-keyword',\n  text: 'nickname'\n}];\n\n\nexport function ReactTemplateEditorWrapper() {\n  const editorRefObj = React.useRef<IImperativeHandles>(null);\n  const [value] = React.useState('{{123}} {{124}}');\n  const [placeholders] = React.useState(DefaultPlaceholders);\n\n  React.useEffect(() => {\n    setTimeout(() => {\n      DefaultPlaceholders.push({\n        type: 'variable',\n        matchRegexp: /^\\{\\{(124)\\}\\}/,\n        className: 'cm-keyword',\n        text: 'age'\n      });\n      // console.log(editorRefObj.current);\n\n      editorRefObj.current!.forceUpdateEditor();\n    }, 2000);\n  }, []);\n\n\n  return (\n    <ReactTemplateEditor\n      ref={editorRefObj}\n      value={value}\n      placeholders={placeholders}\n      className='editor-instance'\n    />);\n}\n\n","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground } from 'docz';\nimport { ReactTemplateEditorWrapper } from './index.tsx';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h1>\n\n    <Playground __position={0} __code={'<ReactTemplateEditorWrapper />'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      ReactTemplateEditorWrapper\n    }} __codesandbox={`undefined`} mdxType=\"Playground\">\n  <ReactTemplateEditorWrapper mdxType=\"ReactTemplateEditorWrapper\" />\n    </Playground>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n  ","import CodeMirror from 'codemirror';\nimport { IPlaceholder } from './index.d';\n\n\ninterface IModeConfig {\n  placeholders: IPlaceholder[];\n}\n\nlet counter = 0;\n\nexport function defineMode(config: IModeConfig) {\n  const name = `Template-Editor-${++counter}-${Date.now()}`;\n\n  CodeMirror.defineMode(name, () => {\n\n    function tokenBase(stream: CodeMirror.StringStream, state: any) {\n      state.line = (stream as any).lineOracle.line;\n      for (const placeholder of config.placeholders) {\n        if (stream.match(placeholder.matchRegexp, false)) {\n\n          const consumeRegexp = placeholder.consumeRegexp || placeholder.matchRegexp;\n          const matched = stream.match(consumeRegexp);\n          state.placeholder = placeholder;\n          state.matchedValue = matched[1];\n          return placeholder.type;\n        }\n      }\n\n      stream.next();\n\n      return null;\n    }\n\n    return {\n      startState() {\n        return { tokenize: tokenBase, context: null };\n      },\n\n      token(stream, state: any) {\n        if (state.tokenize === tokenBase && stream.eatSpace()) {\n          state.placeholder = undefined;\n          state.matchedValue = undefined;\n          return null;\n        }\n\n        const style = state.tokenize(stream, state);\n\n        return style;\n      }\n    };\n  });\n  return name;\n}\n","\n/**\n * Create `span` for Placehoder display\n * @param innerHTML string\n * @param className string\n */\nexport function createSpanReplacementNode(innerHTML: string, className: string) {\n  const $span = document.createElement('span');\n  $span.innerHTML = innerHTML;\n  if (className) {\n    className.split(' ').forEach(subClassName => {\n      if (subClassName) {\n        $span.classList.add(subClassName);\n      }\n    });\n  }\n  return $span;\n}\n","import CodeMirror from 'codemirror';\nimport 'codemirror/lib/codemirror.css';\nrequire('codemirror/addon/scroll/simplescrollbars');\nimport 'codemirror/addon/scroll/simplescrollbars.css';\nrequire('codemirror/addon/display/placeholder');\nimport { defineMode } from './mode';\nimport { IEditorOptions } from './index.d';\nimport { createSpanReplacementNode } from './createSpanReplacementNode';\nexport { createSpanReplacementNode } from './createSpanReplacementNode';\n\n\n\nexport class TemplateEditor {\n\n  public instance!: CodeMirror.Editor;\n\n  constructor(container: HTMLElement, private options: IEditorOptions) {\n\n    const mode = defineMode({\n      placeholders: options.placeholders\n    });\n\n    const lineWrapping = 'lineWrapping' in options ? !!options.lineWrapping : true;\n\n\n    this.instance = CodeMirror(container, {\n      mode,\n      lineWrapping,\n      scrollbarStyle: 'simple',\n      readOnly: options.disabled,\n      value: options.initialValue || '',\n      placeholder: options.placeholder\n    });\n\n\n    this.replaceVariables();\n    this.listenContentChange();\n  }\n\n  private listenContentChange() {\n    // if (!this.options.controlled) {\n    //   this.instance.on('beforeChange', (_R, change) => {\n    //     console.log(change,_R);\n    //     change.cancel();\n    //   });\n    // }\n\n    this.instance.on('change', () => {\n      this.replaceVariables();\n    });\n  }\n\n  private replaceVariables() {\n    const { createReplacementNode } = this.options;\n\n    const document = this.instance.getDoc();\n    document.getAllMarks().forEach(mark => {\n      mark.clear();\n    });\n\n    this.getTokens().forEach(token => {\n      if (token && token.type && token.state && token.state.placeholder) {\n\n        const line = token.state.line;\n        const startPos = { line, ch: token.start };\n        const endPos = { line, ch: token.end };\n\n        const placeholder = token.state.placeholder;\n        const matchedValue = token.state.matchedValue;\n\n        const replacedWith = createReplacementNode ?\n          createReplacementNode(placeholder, matchedValue, token.string) :\n          (() => {\n            const text = placeholder && placeholder.hasOwnProperty('text') ?\n              (typeof placeholder.text === 'string' ? placeholder.text : placeholder.text(matchedValue)) : matchedValue;\n            const className = placeholder && placeholder.hasOwnProperty('className') ? placeholder.className : 'cm-variable';\n            return createSpanReplacementNode(text, className);\n          })();\n\n        document.markText(startPos, endPos, {\n          replacedWith\n        });\n      }\n    });\n  }\n\n  public getTokens() {\n    const tokens: CodeMirror.Token[] = [];\n    const document = this.instance.getDoc();\n    document.eachLine(line => {\n      const lineTokens = this.instance.getLineTokens((line as any).lineNo());\n      lineTokens.forEach(token => tokens.push(token));\n    });\n    return tokens;\n  }\n\n  public getValue() {\n    return this.instance.getDoc().getValue();\n  }\n\n  public setValue(input: string) {\n    this.instance.getDoc().setValue(input);\n  }\n\n  public onChange(change: (input: string) => any) {\n    this.instance.on('change', () => {\n      change(this.getValue());\n    });\n  }\n\n  // public insert(input: string) {\n  //   const document = this.instance.getDoc();\n  //   const cursor = document.getCursor();\n  //   document.replaceRange(input, cursor, cursor);\n  // }\n}\n","import * as React from 'react';\nimport { TemplateEditor } from '@template-editor/native';\nimport { IProps, IImperativeHandles } from './index.d';\n\n\nconst Editor: React.RefForwardingComponent<IImperativeHandles, IProps> = (props, ref) => {\n  const {\n    value = '',\n    disabled,\n    placeholder,\n    placeholders,\n    createReplacementNode,\n    onChange,\n    ...rest } = props;\n  const editorRef = React.useRef<HTMLDivElement>(null);\n  const [editor, setEditorInstance] = React.useState<TemplateEditor>();\n\n  // componentDidMount\n  React.useEffect(() => {\n    setEditorInstance(new TemplateEditor(editorRef.current!, {\n      initialValue: value,\n      disabled,\n      placeholder,\n      placeholders,\n      createReplacementNode\n    }));\n  }, []);\n\n  // add onchange listener\n  React.useEffect(() => {\n    if (onChange) {\n      editor!.onChange((input) => {\n        const tokens = editor!.getTokens();\n        onChange(input, tokens);\n      });\n    }\n  }, []);\n\n  // when value changed\n  React.useEffect(() => {\n    editor && editor.setValue(props.value);\n  }, [props.value]);\n\n\n  // when placeholder changed\n  React.useEffect(() => {\n    editor && editor.instance.setOption('placeholder', placeholder);\n  }, [props.placeholder]);\n\n\n  // when disabled changed\n  React.useEffect(() => {\n    editor && editor.instance.setOption('readOnly', disabled);\n  }, [props.disabled]);\n\n  // when other props changed, Codemirror need to re-parse\n  React.useImperativeHandle(ref, () => ({\n    forceUpdateEditor: () => {\n      editor!.setValue(props.value + ' ');\n      setTimeout(() => {\n        editor!.setValue(props.value);\n      }, 0);\n    }\n  }));\n\n  return (\n    <div ref={editorRef} {...rest}></div>\n  );\n};\n\nexport const ReactTemplateEditor = React.forwardRef(Editor);\n"],"sourceRoot":""}