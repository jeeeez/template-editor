{"version":3,"sources":["C:/Users/JF/Desktop/template-editor/packages/react-template-editor/docz/Introduction.mdx","C:/Users/JF/Desktop/template-editor/packages/editor/src/mode.ts","C:/Users/JF/Desktop/template-editor/packages/editor/src/createSpanReplacementNode.ts","C:/Users/JF/Desktop/template-editor/packages/editor/src/index.ts","C:/Users/JF/Desktop/template-editor/packages/react-template-editor/src/index.tsx"],"names":["layoutProps","MDXLayout","MDXContent","components","props","mdxType","parentName","of","ReactTemplateEditor","isMDXComponent","counter","createSpanReplacementNode","innerHTML","className","$span","document","createElement","split","forEach","subClassName","classList","add","container","options","config","name","mode","placeholders","Date","now","defineMode","tokenBase","stream","state","line","lineOracle","placeholder","match","matchRegexp","consumeRegexp","matched","matchedValue","type","next","startState","tokenize","context","token","eatSpace","undefined","lineWrapping","this","instance","scrollbarStyle","readOnly","disabled","value","initialValue","replaceVariables","listenContentChange","on","createReplacementNode","getDoc","getAllMarks","mark","clear","getTokens","startPos","ch","start","endPos","end","replacedWith","string","hasOwnProperty","text","markText","tokens","eachLine","getLineTokens","lineNo","push","getValue","setValue","input","onChange","change","ref","style","editorRef","editor","setEditorInstance","current","setOption","forceUpdateEditor","setTimeout","border","borderRadius","rest"],"mappings":"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","file":"static/js/docz-introduction.2ee3735c.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz';\nimport { ReactTemplateEditor } from '@template-editor/react';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"introduction\"\n    }}>{`Introduction`}</h1>\n    <p><inlineCode parentName=\"p\">{`ReactTemplateEditor`}</inlineCode>{` is a `}<inlineCode parentName=\"p\">{`React`}</inlineCode>{` component of `}<inlineCode parentName=\"p\">{`TemplateEditor(@template-editor/native)`}</inlineCode>{`,`}<br />{`\nIt's a `}<inlineCode parentName=\"p\">{`CodeMirror`}</inlineCode>{` based template editor usually used as `}<inlineCode parentName=\"p\">{`message editor`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`wechat message editor`}</inlineCode>{`.`}</p>\n    <p>{`Unfortunately this is not a strictly controlled component, but we are trying to improve it.`}</p>\n    <h2 {...{\n      \"id\": \"install\"\n    }}>{`Install`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`npm i @template-editor/react\n# or\nyarn add @template-editor/react\n`}</code></pre>\n    <p>{`Then use it in your code...`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { ReactTemplateEditor } from '@template-editor/react';\n\n<ReactTemplateEditor\n  value=''\n  placeholder='',\n  placeholders={[] as IPlaceholder[]}\n/>\n\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props of={ReactTemplateEditor} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"type-definitions\"\n    }}>{`Type Definitions`}</h2>\n    <h3 {...{\n      \"id\": \"iplaceholder\"\n    }}>{`IPlaceholder`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`interface IPlaceholder {\n  matchRegexp: RegExp;\n  consumeRegexp?: RegExp; // default to matchRegexp\n  type: string; // value of CodeMirror.Token.type\n  text?: string | ((v: string) => string); // display text of this placeholder\n  className?: string;\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"ieditoroptions\"\n    }}>{`IEditorOptions`}</h3>\n    <p>{`The second argument of `}<inlineCode parentName=\"p\">{`TemplateEditor`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`interface IEditorOptions {\n  initialValue: string;\n  placeholders: IPlaceholder[];\n  lineWrapping?: boolean;\n  createReplacementNode?(\n    placeholder: IPlaceholder,\n    value?: string, // the real Value of the matched Placeholder. \\`matchRegexp(input)[1]\\`\n    input?: string // consumed string of the Placeholder\n  ): HTMLSpanElement;\n}\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n  ","import CodeMirror from 'codemirror';\nimport { IPlaceholder } from './index.d';\n\n\ninterface IModeConfig {\n  placeholders: IPlaceholder[];\n}\n\nlet counter = 0;\n\nexport function defineMode(config: IModeConfig) {\n  const name = `Template-Editor-${++counter}-${Date.now()}`;\n\n  CodeMirror.defineMode(name, () => {\n\n    function tokenBase(stream: CodeMirror.StringStream, state: any) {\n      state.line = (stream as any).lineOracle.line;\n      for (const placeholder of config.placeholders) {\n        if (stream.match(placeholder.matchRegexp, false)) {\n\n          const consumeRegexp = placeholder.consumeRegexp || placeholder.matchRegexp;\n          const matched = stream.match(consumeRegexp);\n          state.placeholder = placeholder;\n          state.matchedValue = matched[1];\n          return placeholder.type;\n        }\n      }\n\n      stream.next();\n\n      return null;\n    }\n\n    return {\n      startState() {\n        return { tokenize: tokenBase, context: null };\n      },\n\n      token(stream, state: any) {\n        if (state.tokenize === tokenBase && stream.eatSpace()) {\n          state.placeholder = undefined;\n          state.matchedValue = undefined;\n          return null;\n        }\n\n        const style = state.tokenize(stream, state);\n\n        return style;\n      }\n    };\n  });\n  return name;\n}\n","\n/**\n * Create `span` for Placehoder display\n * @param innerHTML string\n * @param className string\n */\nexport function createSpanReplacementNode(innerHTML: string, className: string) {\n  const $span = document.createElement('span');\n  $span.innerHTML = innerHTML;\n  if (className) {\n    className.split(' ').forEach(subClassName => {\n      if (subClassName) {\n        $span.classList.add(subClassName);\n      }\n    });\n  }\n  return $span;\n}\n","import CodeMirror from 'codemirror';\nimport 'codemirror/lib/codemirror.css';\nrequire('codemirror/addon/scroll/simplescrollbars');\nimport 'codemirror/addon/scroll/simplescrollbars.css';\nrequire('codemirror/addon/display/placeholder');\nimport { defineMode } from './mode';\nimport { IEditorOptions } from './index.d';\nimport { createSpanReplacementNode } from './createSpanReplacementNode';\nexport { createSpanReplacementNode } from './createSpanReplacementNode';\n\n\n\nexport class TemplateEditor {\n\n  public instance!: CodeMirror.Editor;\n\n  constructor(container: HTMLElement, private options: IEditorOptions) {\n\n    const mode = defineMode({\n      placeholders: options.placeholders\n    });\n\n    const lineWrapping = 'lineWrapping' in options ? !!options.lineWrapping : true;\n\n\n    this.instance = CodeMirror(container, {\n      mode,\n      lineWrapping,\n      scrollbarStyle: 'simple',\n      readOnly: options.disabled ? 'nocursor' : false,\n      value: options.initialValue || '',\n      placeholder: options.placeholder\n    });\n\n\n    this.replaceVariables();\n    this.listenContentChange();\n  }\n\n  private listenContentChange() {\n    // if (!this.options.controlled) {\n    //   this.instance.on('beforeChange', (_R, change) => {\n    //     console.log(change,_R);\n    //     change.cancel();\n    //   });\n    // }\n\n    this.instance.on('change', () => {\n      this.replaceVariables();\n    });\n  }\n\n  private replaceVariables() {\n    const { createReplacementNode } = this.options;\n\n    const document = this.instance.getDoc();\n    document.getAllMarks().forEach(mark => {\n      mark.clear();\n    });\n\n    this.getTokens().forEach(token => {\n      if (token && token.type && token.state && token.state.placeholder) {\n\n        const line = token.state.line;\n        const startPos = { line, ch: token.start };\n        const endPos = { line, ch: token.end };\n\n        const placeholder = token.state.placeholder;\n        const matchedValue = token.state.matchedValue;\n\n        const replacedWith = createReplacementNode ?\n          createReplacementNode(placeholder, matchedValue, token.string) :\n          (() => {\n            const text = placeholder && placeholder.hasOwnProperty('text') ?\n              (typeof placeholder.text === 'string' ? placeholder.text : placeholder.text(matchedValue)) : matchedValue;\n            const className = placeholder && placeholder.hasOwnProperty('className') ? placeholder.className : 'cm-variable';\n            return createSpanReplacementNode(text, className);\n          })();\n\n        document.markText(startPos, endPos, {\n          replacedWith\n        });\n      }\n    });\n  }\n\n  public getTokens() {\n    const tokens: CodeMirror.Token[] = [];\n    const document = this.instance.getDoc();\n    document.eachLine(line => {\n      const lineTokens = this.instance.getLineTokens((line as any).lineNo());\n      lineTokens.forEach(token => tokens.push(token));\n    });\n    return tokens;\n  }\n\n  public getValue() {\n    return this.instance.getDoc().getValue();\n  }\n\n  public setValue(input: string) {\n    this.instance.getDoc().setValue(input);\n  }\n\n  public onChange(change: (input: string) => any) {\n    this.instance.on('change', () => {\n      change(this.getValue());\n    });\n  }\n\n  // public insert(input: string) {\n  //   const document = this.instance.getDoc();\n  //   const cursor = document.getCursor();\n  //   document.replaceRange(input, cursor, cursor);\n  // }\n}\n","import * as React from 'react';\nimport { TemplateEditor } from '@template-editor/native';\nimport { IProps, IImperativeHandles } from './index.d';\n\n\nconst Editor: React.RefForwardingComponent<IImperativeHandles, IProps> = (props, ref) => {\n  const {\n    value = '',\n    style,\n    disabled,\n    placeholder,\n    placeholders,\n    createReplacementNode,\n    onChange,\n    ...rest } = props;\n  const editorRef = React.useRef<HTMLDivElement>(null);\n  const [editor, setEditorInstance] = React.useState<TemplateEditor>();\n\n  // componentDidMount\n  React.useEffect(() => {\n    setEditorInstance(new TemplateEditor(editorRef.current!, {\n      initialValue: value,\n      disabled,\n      placeholder,\n      placeholders,\n      createReplacementNode\n    }));\n  }, []);\n\n  // add onchange listener\n  React.useEffect(() => {\n    if (onChange) {\n      editor!.onChange((input) => {\n        const tokens = editor!.getTokens();\n        onChange(input, tokens);\n      });\n    }\n  }, []);\n\n  // when value changed\n  React.useEffect(() => {\n    editor && editor.setValue(props.value);\n  }, [props.value]);\n\n\n  // when placeholder changed\n  React.useEffect(() => {\n    editor && editor.instance.setOption('placeholder', placeholder);\n  }, [props.placeholder]);\n\n\n  // when disabled changed\n  React.useEffect(() => {\n    editor && editor.instance.setOption('readOnly', disabled ? 'nocursor' : false);\n  }, [props.disabled]);\n\n  // when other props changed, Codemirror need to re-parse\n  React.useImperativeHandle(ref, () => ({\n    forceUpdateEditor: () => {\n      editor!.setValue(props.value + ' ');\n      setTimeout(() => {\n        editor!.setValue(props.value);\n      }, 0);\n    }\n  }));\n\n  return (\n    <div ref={editorRef} style={{ border: '1px solid #d9d9d9', borderRadius: 2, ...style }} {...rest}></div>\n  );\n};\n\nexport const ReactTemplateEditor = React.forwardRef(Editor);\n"],"sourceRoot":""}