{"remainingRequest":"/Users/jz/shuyun/template-editor/node_modules/thread-loader/dist/cjs.js??ref--11-1!/Users/jz/shuyun/template-editor/node_modules/babel-loader/lib/index.js??ref--11-2!/Users/jz/shuyun/template-editor/node_modules/source-map-loader/index.js!/Users/jz/shuyun/template-editor/packages/editor/src/index.ts","dependencies":[{"path":"/Users/jz/shuyun/template-editor/packages/editor/src/index.ts","mtime":1564132681385},{"path":"/Users/jz/shuyun/template-editor/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jz/shuyun/template-editor/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jz/shuyun/template-editor/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/jz/shuyun/template-editor/node_modules/source-map-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICIvVXNlcnMvanovc2h1eXVuL3RlbXBsYXRlLWVkaXRvci9ub2RlX21vZHVsZXMvYmFiZWwtcHJlc2V0LXJlYWN0LWFwcC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2siOwppbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gIi9Vc2Vycy9qei9zaHV5dW4vdGVtcGxhdGUtZWRpdG9yL25vZGVfbW9kdWxlcy9iYWJlbC1wcmVzZXQtcmVhY3QtYXBwL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzcyI7CgooZnVuY3Rpb24gKCkgewogIHZhciBlbnRlck1vZHVsZSA9ICh0eXBlb2YgcmVhY3RIb3RMb2FkZXJHbG9iYWwgIT09ICd1bmRlZmluZWQnID8gcmVhY3RIb3RMb2FkZXJHbG9iYWwgOiByZXF1aXJlKCdyZWFjdC1ob3QtbG9hZGVyJykpLmVudGVyTW9kdWxlOwogIGVudGVyTW9kdWxlICYmIGVudGVyTW9kdWxlKG1vZHVsZSk7Cn0pKCk7Cgp2YXIgX19zaWduYXR1cmVfXyA9IHR5cGVvZiByZWFjdEhvdExvYWRlckdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyByZWFjdEhvdExvYWRlckdsb2JhbFsiZGVmYXVsdCJdLnNpZ25hdHVyZSA6IGZ1bmN0aW9uIChhKSB7CiAgcmV0dXJuIGE7Cn07CgppbXBvcnQgQ29kZU1pcnJvciBmcm9tICdjb2RlbWlycm9yJzsgLy8gaW1wb3J0ICdjb2RlbWlycm9yL2xpYi9jb2RlbWlycm9yLmNzcyc7CgpyZXF1aXJlKCdjb2RlbWlycm9yL2FkZG9uL3Njcm9sbC9zaW1wbGVzY3JvbGxiYXJzJyk7IC8vIGltcG9ydCAnY29kZW1pcnJvci9hZGRvbi9zY3JvbGwvc2ltcGxlc2Nyb2xsYmFycy5jc3MnOwoKCmltcG9ydCB7IGRlZmluZU1vZGUgfSBmcm9tICcuL21vZGUnOwppbXBvcnQgeyBjcmVhdGVTcGFuUmVwbGFjZW1lbnROb2RlIH0gZnJvbSAnLi9jcmVhdGVTcGFuUmVwbGFjZW1lbnROb2RlJzsKZXhwb3J0IHsgY3JlYXRlU3BhblJlcGxhY2VtZW50Tm9kZSB9IGZyb20gJy4vY3JlYXRlU3BhblJlcGxhY2VtZW50Tm9kZSc7CgppZiAodHlwZW9mIGNyZWF0ZVNwYW5SZXBsYWNlbWVudE5vZGUgIT09ICd1bmRlZmluZWQnICYmIGNyZWF0ZVNwYW5SZXBsYWNlbWVudE5vZGUgJiYgY3JlYXRlU3BhblJlcGxhY2VtZW50Tm9kZSA9PT0gT2JqZWN0KGNyZWF0ZVNwYW5SZXBsYWNlbWVudE5vZGUpICYmIE9iamVjdC5pc0V4dGVuc2libGUoY3JlYXRlU3BhblJlcGxhY2VtZW50Tm9kZSkpIHsKICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3JlYXRlU3BhblJlcGxhY2VtZW50Tm9kZSwgJ19fZmlsZW1ldGEnLCB7CiAgICBlbnVtZXJhYmxlOiB0cnVlLAogICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgdmFsdWU6IHsKICAgICAgbmFtZTogImNyZWF0ZVNwYW5SZXBsYWNlbWVudE5vZGUiLAogICAgICBmaWxlbmFtZTogInBhY2thZ2VzL2VkaXRvci9zcmMvaW5kZXgudHMiCiAgICB9CiAgfSk7Cn0KCmV4cG9ydCB2YXIgVGVtcGxhdGVFZGl0b3IgPQovKiNfX1BVUkVfXyovCmZ1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBUZW1wbGF0ZUVkaXRvcihjb250YWluZXIsIG9wdGlvbnMpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUZW1wbGF0ZUVkaXRvcik7CgogICAgdGhpcy5vcHRpb25zID0gb3B0aW9uczsKICAgIHRoaXMuaW5zdGFuY2UgPSB2b2lkIDA7CiAgICB2YXIgbW9kZSA9IGRlZmluZU1vZGUoewogICAgICBwbGFjZWhvbGRlcnM6IG9wdGlvbnMucGxhY2Vob2xkZXJzCiAgICB9KTsKICAgIHZhciBsaW5lV3JhcHBpbmcgPSAnbGluZVdyYXBwaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLmxpbmVXcmFwcGluZyA6IHRydWU7CiAgICB0aGlzLmluc3RhbmNlID0gQ29kZU1pcnJvcihjb250YWluZXIsIHsKICAgICAgbW9kZTogbW9kZSwKICAgICAgbGluZVdyYXBwaW5nOiBsaW5lV3JhcHBpbmcsCiAgICAgIHNjcm9sbGJhclN0eWxlOiAnc2ltcGxlJywKICAgICAgdmFsdWU6IG9wdGlvbnMuaW5pdGlhbFZhbHVlIHx8ICcnCiAgICB9KTsKICAgIHRoaXMucmVwbGFjZVZhcmlhYmxlcygpOwogICAgdGhpcy5saXN0ZW5Db250ZW50Q2hhbmdlKCk7CiAgfQoKICBfY3JlYXRlQ2xhc3MoVGVtcGxhdGVFZGl0b3IsIFt7CiAgICBrZXk6ICJsaXN0ZW5Db250ZW50Q2hhbmdlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBsaXN0ZW5Db250ZW50Q2hhbmdlKCkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgLy8gaWYgKCF0aGlzLm9wdGlvbnMuY29udHJvbGxlZCkgewogICAgICAvLyAgIHRoaXMuaW5zdGFuY2Uub24oJ2JlZm9yZUNoYW5nZScsIChfUiwgY2hhbmdlKSA9PiB7CiAgICAgIC8vICAgICBjb25zb2xlLmxvZyhjaGFuZ2UsX1IpOwogICAgICAvLyAgICAgY2hhbmdlLmNhbmNlbCgpOwogICAgICAvLyAgIH0pOwogICAgICAvLyB9CiAgICAgIHRoaXMuaW5zdGFuY2Uub24oJ2NoYW5nZScsIGZ1bmN0aW9uICgpIHsKICAgICAgICBfdGhpcy5yZXBsYWNlVmFyaWFibGVzKCk7CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogInJlcGxhY2VWYXJpYWJsZXMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlcGxhY2VWYXJpYWJsZXMoKSB7CiAgICAgIHZhciBjcmVhdGVSZXBsYWNlbWVudE5vZGUgPSB0aGlzLm9wdGlvbnMuY3JlYXRlUmVwbGFjZW1lbnROb2RlOwogICAgICB2YXIgZG9jdW1lbnQgPSB0aGlzLmluc3RhbmNlLmdldERvYygpOwogICAgICBkb2N1bWVudC5nZXRBbGxNYXJrcygpLmZvckVhY2goZnVuY3Rpb24gKG1hcmspIHsKICAgICAgICBtYXJrLmNsZWFyKCk7CiAgICAgIH0pOwogICAgICB0aGlzLmdldFRva2VucygpLmZvckVhY2goZnVuY3Rpb24gKHRva2VuKSB7CiAgICAgICAgaWYgKHRva2VuICYmIHRva2VuLnR5cGUgJiYgdG9rZW4uc3RhdGUgJiYgdG9rZW4uc3RhdGUucGxhY2Vob2xkZXIpIHsKICAgICAgICAgIHZhciBsaW5lID0gdG9rZW4uc3RhdGUubGluZTsKICAgICAgICAgIHZhciBzdGFydFBvcyA9IHsKICAgICAgICAgICAgbGluZTogbGluZSwKICAgICAgICAgICAgY2g6IHRva2VuLnN0YXJ0CiAgICAgICAgICB9OwogICAgICAgICAgdmFyIGVuZFBvcyA9IHsKICAgICAgICAgICAgbGluZTogbGluZSwKICAgICAgICAgICAgY2g6IHRva2VuLmVuZAogICAgICAgICAgfTsKICAgICAgICAgIHZhciBwbGFjZWhvbGRlciA9IHRva2VuLnN0YXRlLnBsYWNlaG9sZGVyOwogICAgICAgICAgdmFyIG1hdGNoZWRWYWx1ZSA9IHRva2VuLnN0YXRlLm1hdGNoZWRWYWx1ZTsKICAgICAgICAgIHZhciByZXBsYWNlZFdpdGggPSBjcmVhdGVSZXBsYWNlbWVudE5vZGUgPyBjcmVhdGVSZXBsYWNlbWVudE5vZGUocGxhY2Vob2xkZXIsIG1hdGNoZWRWYWx1ZSwgdG9rZW4uc3RyaW5nKSA6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdmFyIHRleHQgPSBwbGFjZWhvbGRlciAmJiBwbGFjZWhvbGRlci5oYXNPd25Qcm9wZXJ0eSgndGV4dCcpID8gdHlwZW9mIHBsYWNlaG9sZGVyLnRleHQgPT09ICdzdHJpbmcnID8gcGxhY2Vob2xkZXIudGV4dCA6IHBsYWNlaG9sZGVyLnRleHQobWF0Y2hlZFZhbHVlKSA6IG1hdGNoZWRWYWx1ZTsKICAgICAgICAgICAgdmFyIGNsYXNzTmFtZSA9IHBsYWNlaG9sZGVyICYmIHBsYWNlaG9sZGVyLmhhc093blByb3BlcnR5KCdjbGFzc05hbWUnKSA/IHBsYWNlaG9sZGVyLmNsYXNzTmFtZSA6ICdjbS12YXJpYWJsZSc7CiAgICAgICAgICAgIHJldHVybiBjcmVhdGVTcGFuUmVwbGFjZW1lbnROb2RlKHRleHQsIGNsYXNzTmFtZSk7CiAgICAgICAgICB9KCk7CiAgICAgICAgICBkb2N1bWVudC5tYXJrVGV4dChzdGFydFBvcywgZW5kUG9zLCB7CiAgICAgICAgICAgIHJlcGxhY2VkV2l0aDogcmVwbGFjZWRXaXRoCiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogImdldFRva2VucyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VG9rZW5zKCkgewogICAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICAgIHZhciB0b2tlbnMgPSBbXTsKICAgICAgdmFyIGRvY3VtZW50ID0gdGhpcy5pbnN0YW5jZS5nZXREb2MoKTsKICAgICAgZG9jdW1lbnQuZWFjaExpbmUoZnVuY3Rpb24gKGxpbmUpIHsKICAgICAgICB2YXIgbGluZVRva2VucyA9IF90aGlzMi5pbnN0YW5jZS5nZXRMaW5lVG9rZW5zKGxpbmUubGluZU5vKCkpOwoKICAgICAgICBsaW5lVG9rZW5zLmZvckVhY2goZnVuY3Rpb24gKHRva2VuKSB7CiAgICAgICAgICByZXR1cm4gdG9rZW5zLnB1c2godG9rZW4pOwogICAgICAgIH0pOwogICAgICB9KTsKICAgICAgcmV0dXJuIHRva2VuczsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJnZXRWYWx1ZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VmFsdWUoKSB7CiAgICAgIHJldHVybiB0aGlzLmluc3RhbmNlLmdldERvYygpLmdldFZhbHVlKCk7CiAgICB9CiAgfSwgewogICAga2V5OiAic2V0VmFsdWUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHNldFZhbHVlKGlucHV0KSB7CiAgICAgIHRoaXMuaW5zdGFuY2UuZ2V0RG9jKCkuc2V0VmFsdWUoaW5wdXQpOwogICAgfQogIH0sIHsKICAgIGtleTogIm9uQ2hhbmdlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBvbkNoYW5nZShjaGFuZ2UpIHsKICAgICAgdmFyIF90aGlzMyA9IHRoaXM7CgogICAgICB0aGlzLmluc3RhbmNlLm9uKCdjaGFuZ2UnLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgY2hhbmdlKF90aGlzMy5nZXRWYWx1ZSgpKTsKICAgICAgfSk7CiAgICB9IC8vIHB1YmxpYyBpbnNlcnQoaW5wdXQ6IHN0cmluZykgewogICAgLy8gICBjb25zdCBkb2N1bWVudCA9IHRoaXMuaW5zdGFuY2UuZ2V0RG9jKCk7CiAgICAvLyAgIGNvbnN0IGN1cnNvciA9IGRvY3VtZW50LmdldEN1cnNvcigpOwogICAgLy8gICBkb2N1bWVudC5yZXBsYWNlUmFuZ2UoaW5wdXQsIGN1cnNvciwgY3Vyc29yKTsKICAgIC8vIH0KCiAgfSwgewogICAga2V5OiAiX19yZWFjdHN0YW5kaW5fX3JlZ2VuZXJhdGVCeUV2YWwiLAogICAgLy8gQHRzLWlnbm9yZQogICAgdmFsdWU6IGZ1bmN0aW9uIF9fcmVhY3RzdGFuZGluX19yZWdlbmVyYXRlQnlFdmFsKGtleSwgY29kZSkgewogICAgICAvLyBAdHMtaWdub3JlCiAgICAgIHRoaXNba2V5XSA9IGV2YWwoY29kZSk7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gVGVtcGxhdGVFZGl0b3I7Cn0oKTsKCmlmICh0eXBlb2YgVGVtcGxhdGVFZGl0b3IgIT09ICd1bmRlZmluZWQnICYmIFRlbXBsYXRlRWRpdG9yICYmIFRlbXBsYXRlRWRpdG9yID09PSBPYmplY3QoVGVtcGxhdGVFZGl0b3IpICYmIE9iamVjdC5pc0V4dGVuc2libGUoVGVtcGxhdGVFZGl0b3IpKSB7CiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRlbXBsYXRlRWRpdG9yLCAnX19maWxlbWV0YScsIHsKICAgIGVudW1lcmFibGU6IHRydWUsCiAgICBjb25maWd1cmFibGU6IHRydWUsCiAgICB2YWx1ZTogewogICAgICBuYW1lOiAiVGVtcGxhdGVFZGl0b3IiLAogICAgICBmaWxlbmFtZTogInBhY2thZ2VzL2VkaXRvci9zcmMvaW5kZXgudHMiCiAgICB9CiAgfSk7Cn0KCjsKCihmdW5jdGlvbiAoKSB7CiAgdmFyIHJlYWN0SG90TG9hZGVyID0gKHR5cGVvZiByZWFjdEhvdExvYWRlckdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyByZWFjdEhvdExvYWRlckdsb2JhbCA6IHJlcXVpcmUoJ3JlYWN0LWhvdC1sb2FkZXInKSkuZGVmYXVsdDsKCiAgaWYgKCFyZWFjdEhvdExvYWRlcikgewogICAgcmV0dXJuOwogIH0KCiAgcmVhY3RIb3RMb2FkZXIucmVnaXN0ZXIoVGVtcGxhdGVFZGl0b3IsICJUZW1wbGF0ZUVkaXRvciIsICIvVXNlcnMvanovc2h1eXVuL3RlbXBsYXRlLWVkaXRvci9wYWNrYWdlcy9lZGl0b3Ivc3JjL2luZGV4LnRzIik7Cn0pKCk7Cgo7CgooZnVuY3Rpb24gKCkgewogIHZhciBsZWF2ZU1vZHVsZSA9ICh0eXBlb2YgcmVhY3RIb3RMb2FkZXJHbG9iYWwgIT09ICd1bmRlZmluZWQnID8gcmVhY3RIb3RMb2FkZXJHbG9iYWwgOiByZXF1aXJlKCdyZWFjdC1ob3QtbG9hZGVyJykpLmxlYXZlTW9kdWxlOwogIGxlYXZlTW9kdWxlICYmIGxlYXZlTW9kdWxlKG1vZHVsZSk7Cn0pKCk7"},{"version":3,"sources":["/Users/jz/shuyun/template-editor/packages/editor/src/index.ts"],"names":["CodeMirror","require","defineMode","createSpanReplacementNode","TemplateEditor","container","options","instance","mode","placeholders","lineWrapping","scrollbarStyle","value","initialValue","replaceVariables","listenContentChange","on","createReplacementNode","document","getDoc","getAllMarks","forEach","mark","clear","getTokens","token","type","state","placeholder","line","startPos","ch","start","endPos","end","matchedValue","replacedWith","string","text","hasOwnProperty","className","markText","tokens","eachLine","lineTokens","getLineTokens","lineNo","push","getValue","input","setValue","change"],"mappings":"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","sourcesContent":["import CodeMirror from 'codemirror';\n// import 'codemirror/lib/codemirror.css';\nrequire('codemirror/addon/scroll/simplescrollbars');\n// import 'codemirror/addon/scroll/simplescrollbars.css';\nimport { defineMode } from './mode';\nimport { IEditorOptions } from './index.d';\nimport { createSpanReplacementNode } from './createSpanReplacementNode';\nexport { createSpanReplacementNode } from './createSpanReplacementNode';\n\n\n\nexport class TemplateEditor {\n\n  public instance!: CodeMirror.Editor;\n\n  constructor(container: HTMLElement, private options: IEditorOptions) {\n\n    const mode = defineMode({\n      placeholders: options.placeholders\n    });\n\n    const lineWrapping = 'lineWrapping' in options ? !!options.lineWrapping : true;\n\n    this.instance = CodeMirror(container, {\n      mode,\n      lineWrapping,\n      scrollbarStyle: 'simple',\n      value: options.initialValue || ''\n    });\n\n\n    this.replaceVariables();\n    this.listenContentChange();\n  }\n\n  private listenContentChange() {\n    // if (!this.options.controlled) {\n    //   this.instance.on('beforeChange', (_R, change) => {\n    //     console.log(change,_R);\n    //     change.cancel();\n    //   });\n    // }\n\n    this.instance.on('change', () => {\n      this.replaceVariables();\n    });\n  }\n\n  private replaceVariables() {\n    const { createReplacementNode } = this.options;\n\n    const document = this.instance.getDoc();\n    document.getAllMarks().forEach(mark => {\n      mark.clear();\n    });\n\n    this.getTokens().forEach(token => {\n      if (token && token.type && token.state && token.state.placeholder) {\n\n        const line = token.state.line;\n        const startPos = { line, ch: token.start };\n        const endPos = { line, ch: token.end };\n\n        const placeholder = token.state.placeholder;\n        const matchedValue = token.state.matchedValue;\n\n        const replacedWith = createReplacementNode ?\n          createReplacementNode(placeholder, matchedValue, token.string) :\n          (() => {\n            const text = placeholder && placeholder.hasOwnProperty('text') ?\n              (typeof placeholder.text === 'string' ? placeholder.text : placeholder.text(matchedValue)) : matchedValue;\n            const className = placeholder && placeholder.hasOwnProperty('className') ? placeholder.className : 'cm-variable';\n            return createSpanReplacementNode(text, className);\n          })();\n\n        document.markText(startPos, endPos, {\n          replacedWith\n        });\n      }\n    });\n  }\n\n  public getTokens() {\n    const tokens: CodeMirror.Token[] = [];\n    const document = this.instance.getDoc();\n    document.eachLine(line => {\n      const lineTokens = this.instance.getLineTokens((line as any).lineNo());\n      lineTokens.forEach(token => tokens.push(token));\n    });\n    return tokens;\n  }\n\n  public getValue() {\n    return this.instance.getDoc().getValue();\n  }\n\n  public setValue(input: string) {\n    this.instance.getDoc().setValue(input);\n  }\n\n  public onChange(change: (input: string) => any) {\n    this.instance.on('change', () => {\n      change(this.getValue());\n    });\n  }\n\n  // public insert(input: string) {\n  //   const document = this.instance.getDoc();\n  //   const cursor = document.getCursor();\n  //   document.replaceRange(input, cursor, cursor);\n  // }\n}\n"]}]}